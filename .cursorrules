This file provides rules and guidelines for the AI to follow during code generation.
rules:

language: java

framework: spring-boot

linter: checkstyle

formatter: google-java-format

dependencies:

groupId: org.springframework.boot
artifactId: spring-boot-starter-web

groupId: org.springframework.boot
artifactId: spring-boot-starter-data-jpa

groupId: org.springframework.boot
artifactId: spring-boot-starter-security

groupId: org.springframework.boot
artifactId: spring-boot-starter-validation

groupId: mysql
artifactId: mysql-connector-java
scope: runtime

groupId: org.projectlombok
artifactId: lombok
optional: true

groupId: io.jsonwebtoken
artifactId: jjwt-api
version: 0.11.5

groupId: io.jsonwebtoken
artifactId: jjwt-impl
version: 0.11.5
scope: runtime

groupId: io.jsonwebtoken
artifactId: jjwt-jackson
version: 0.11.5
scope: runtime

groupId: org.springframework.boot
artifactId: spring-boot-starter-test
scope: test

structure:

path: src/main/java/com/example/movieticket/config
description: "Contains Spring configuration classes, like SecurityConfig."

path: src/main/java/com/example/movieticket/controller
description: "Contains RestControllers that handle API endpoints."

path: src/main/java/com/example/movieticket/dto
description: "Contains Data Transfer Objects used for API request/response bodies."

path: src/main/java/com/example/movieticket/entity
description: "Contains JPA entity classes that map to database tables."

path: src/main/java/com/example/movieticket/exception
description: "Contains custom exception classes and a global exception handler."

path: src/main/java/com/example/movieticket/repository
description: "Contains Spring Data JPA repository interfaces."

path: src/main/java/com/example/movieticket/security
description: "Contains all JWT and Spring Security related classes (token provider, filter, UserDetailsService)."

path: src/main/java/com/example/movieticket/service
description: "Contains business logic. Use interfaces and implementations."

path: src/main/resources/application.properties
description: "Main configuration file for database, server, and JWT settings."

guidelines:

"Generate a complete, runnable Spring Boot application based on the prompt."

"Use Lombok annotations extensively (@Data, @Entity, @Builder, @NoArgsConstructor, @AllArgsConstructor, @Service, @Repository, etc.) to reduce boilerplate code."

"The business logic MUST be in the service layer. Controllers should be lightweight and only delegate calls to service methods."

"Use DTOs for all API interactions. Do not expose JPA entities directly in the controller layer. Create separate DTOs for requests and responses where necessary (e.g., LoginRequest, UserResponse)."

"Implement a GlobalExceptionHandler using @ControllerAdvice to provide consistent JSON error responses for exceptions."

"Secure endpoints in the SecurityConfig class. Use method-level security (@PreAuthorize) on controller methods for role-based access control."

"Ensure the JwtAuthenticationFilter is configured to run before other filters in the security chain."

"Externalize all configuration values like database credentials and JWT secrets into application.properties."

"Follow RESTful principles for API endpoint design. Use appropriate HTTP verbs (GET, POST, PUT, DELETE) and status codes (200, 201, 400, 401, 403, 404)."

"Generate Javadoc comments for all public methods in the service layer."